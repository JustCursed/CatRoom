--- before/net/minecraft/network/NetworkSystem.java
+++ after/net/minecraft/network/NetworkSystem.java
@@ -49,27 +49,36 @@
     {
         protected NioEventLoopGroup func_179280_b()
         {
-            return new NioEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Server IO #%d").setDaemon(true).build());
+            return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).setThreadFactory(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER).build());
         }
     };
     public static final LazyLoadBase<EpollEventLoopGroup> field_181141_b = new LazyLoadBase<EpollEventLoopGroup>()
     {
         protected EpollEventLoopGroup func_179280_b()
         {
-            return new EpollEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build());
+            return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).setThreadFactory(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER).build());
         }
     };
     public static final LazyLoadBase<LocalEventLoopGroup> field_180232_b = new LazyLoadBase<LocalEventLoopGroup>()
     {
         protected LocalEventLoopGroup func_179280_b()
         {
-            return new LocalEventLoopGroup(0, new ThreadFactoryBuilder().setNameFormat("Netty Local Server IO #%d").setDaemon(true).build());
+            return new LocalEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Server IO #%d").setDaemon(true).setThreadFactory(net.minecraftforge.fml.common.thread.SidedThreadGroups.CLIENT).build());
         }
     };
     private final MinecraftServer field_151273_d;
     public volatile boolean field_151277_a;
-    private final List<ChannelFuture> field_151274_e = Collections.synchronizedList(Lists.newArrayList());
-    private final List<NetworkManager> field_151272_f = Collections.synchronizedList(Lists.newArrayList());
+    private final List<ChannelFuture> field_151274_e = Collections.<ChannelFuture>synchronizedList(Lists.newArrayList());
+    private final List<NetworkManager> field_151272_f = Collections.<NetworkManager>synchronizedList(Lists.newArrayList());
+    // Paper start - prevent blocking on adding a new network manager while the server is ticking
+    private final List<NetworkManager> pending = Collections.<NetworkManager>synchronizedList(Lists.newArrayList());
+    private void addPending() {
+        synchronized (pending) {
+            this.field_151272_f.addAll(pending);
+            pending.clear();
+        }
+    }
+    // Paper end
 
     public NetworkSystem(MinecraftServer p_i45292_1_)
     {
@@ -79,6 +88,7 @@
 
     public void func_151265_a(InetAddress p_151265_1_, int p_151265_2_) throws IOException
     {
+        if (p_151265_1_ instanceof java.net.Inet6Address) System.setProperty("java.net.preferIPv4Stack", "false");
         synchronized (this.field_151274_e)
         {
             Class <? extends ServerSocketChannel > oclass;
@@ -97,43 +107,26 @@
                 field_151275_b.info("Using default channel type");
             }
 
-            this.field_151274_e
-            .add(
-                new ServerBootstrap()
-                .channel(oclass)
-                .childHandler(
-                    new ChannelInitializer<Channel>()
+            this.field_151274_e.add(((ServerBootstrap)((ServerBootstrap)(new ServerBootstrap()).channel(oclass)).childHandler(new ChannelInitializer<Channel>()
             {
-                @Override
                 protected void initChannel(Channel p_initChannel_1_) throws Exception
                 {
                     try
                     {
-                        p_initChannel_1_.config().setOption(ChannelOption.TCP_NODELAY, true);
+                        p_initChannel_1_.config().setOption(ChannelOption.TCP_NODELAY, Boolean.valueOf(true));
                     }
-                    catch (ChannelException channelexception)
+                    catch (ChannelException var3)
                     {
+                        ;
                     }
 
-                    p_initChannel_1_.pipeline()
-                    .addLast("timeout", new ReadTimeoutHandler(30))
-                    .addLast("legacy_query", new LegacyPingHandler(NetworkSystem.this))
-                    .addLast("splitter", new NettyVarint21FrameDecoder())
-                    .addLast("decoder", new NettyPacketDecoder(EnumPacketDirection.SERVERBOUND))
-                    .addLast("prepender", new NettyVarint21FrameEncoder())
-                    .addLast("encoder", new NettyPacketEncoder(EnumPacketDirection.CLIENTBOUND));
+                    p_initChannel_1_.pipeline().addLast("timeout", new ReadTimeoutHandler(net.minecraftforge.fml.common.network.internal.FMLNetworkHandler.READ_TIMEOUT)).addLast("legacy_query", new LegacyPingHandler(NetworkSystem.this)).addLast("splitter", new NettyVarint21FrameDecoder()).addLast("decoder", new NettyPacketDecoder(EnumPacketDirection.SERVERBOUND)).addLast("prepender", new NettyVarint21FrameEncoder()).addLast("encoder", new NettyPacketEncoder(EnumPacketDirection.CLIENTBOUND));
                     NetworkManager networkmanager = new NetworkManager(EnumPacketDirection.SERVERBOUND);
-                    NetworkSystem.this.field_151272_f.add(networkmanager);
+                    pending.add(networkmanager);
                     p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
                     networkmanager.func_150719_a(new NetHandlerHandshakeTCP(NetworkSystem.this.field_151273_d, networkmanager));
                 }
-            }
-                )
-                .group(lazyloadbase.func_179281_c())
-                .localAddress(p_151265_1_, p_151265_2_)
-                .bind()
-                .syncUninterruptibly()
-            );
+            }).group(lazyloadbase.func_179281_c()).localAddress(p_151265_1_, p_151265_2_)).bind().syncUninterruptibly());
         }
     }
 
@@ -144,9 +137,8 @@
 
         synchronized (this.field_151274_e)
         {
-            channelfuture = new ServerBootstrap().channel(LocalServerChannel.class).childHandler(new ChannelInitializer<Channel>()
+            channelfuture = ((ServerBootstrap)((ServerBootstrap)(new ServerBootstrap()).channel(LocalServerChannel.class)).childHandler(new ChannelInitializer<Channel>()
             {
-                @Override
                 protected void initChannel(Channel p_initChannel_1_) throws Exception
                 {
                     NetworkManager networkmanager = new NetworkManager(EnumPacketDirection.SERVERBOUND);
@@ -154,7 +146,7 @@
                     NetworkSystem.this.field_151272_f.add(networkmanager);
                     p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
                 }
-            }).group(field_151276_c.func_179281_c()).localAddress(LocalAddress.ANY).bind().syncUninterruptibly();
+            }).group(field_151276_c.func_179281_c()).localAddress(LocalAddress.ANY)).bind().syncUninterruptibly();
             this.field_151274_e.add(channelfuture);
         }
 
@@ -171,7 +163,7 @@
             {
                 channelfuture.channel().close().sync();
             }
-            catch (InterruptedException interruptedexception)
+            catch (InterruptedException var4)
             {
                 field_151275_b.error("Interrupted whilst closing channel");
             }
@@ -182,6 +174,14 @@
     {
         synchronized (this.field_151272_f)
         {
+            // Spigot Start
+            addPending(); // Paper
+            // This prevents players from 'gaming' the server, and strategically relogging to increase their position in the tick order
+            if (org.spigotmc.SpigotConfig.playerShuffle > 0 && MinecraftServer.currentTick % org.spigotmc.SpigotConfig.playerShuffle == 0)
+            {
+                Collections.shuffle(this.field_151272_f);
+            }
+            // Spigot End
             Iterator<NetworkManager> iterator = this.field_151272_f.iterator();
 
             while (iterator.hasNext())
@@ -216,7 +216,6 @@
                             final TextComponentString textcomponentstring = new TextComponentString("Internal server error");
                             networkmanager.func_179288_a(new SPacketDisconnect(textcomponentstring), new GenericFutureListener < Future <? super Void >> ()
                             {
-                                @Override
                                 public void operationComplete(Future <? super Void > p_operationComplete_1_) throws Exception
                                 {
                                     networkmanager.func_150718_a(textcomponentstring);
@@ -227,6 +226,9 @@
                     }
                     else
                     {
+                        // Spigot Start - Fix a race condition where a NetworkManager could be unregistered just before connection.
+                        if (networkmanager.preparing) continue;
+                        // Spigot End
                         iterator.remove();
                         networkmanager.func_179293_l();
                     }
